http://www.cnblogs.com/yuanchenqi/articles/6083427.html
http://www.cnblogs.com/wupeiqi/articles/5237704.html
http://www.cnblogs.com/wupeiqi/articles/5246483.html  ORM
http://www.cnblogs.com/sss4/p/7070942.html  ORM
http://www.cnblogs.com/wupeiqi/articles/6144178.html  form
http://www.cnblogs.com/wupeiqi/articles/6216618.html  model
http://www.cnblogs.com/wupeiqi/articles/6229414.html  modelform
http://www.cnblogs.com/yuanchenqi/articles/5997456.html  ajax
http://blog.csdn.net/stpeace/article/details/53512283  csrf攻击与防御
http://www.cnblogs.com/renfanzi/p/5838243.html   django views模块 request参数
http://blog.csdn.net/kuangshp128/article/details/76140149    cookie与session
http://www.cnblogs.com/wupeiqi/articles/6144178.html  Django之Form组件
http://www.cnblogs.com/wupeiqi/p/5938916.html  Django之Form组件
http://www.cnblogs.com/wupeiqi/articles/4786251.html  Django之Form组件
http://www.cnblogs.com/wupeiqi/articles/5132791.html  缓存
https://www.cnblogs.com/kongzhagen/p/6640975.html   Django内置分页
http://www.cnblogs.com/wupeiqi/articles/6283017.html  requests、BeautifulSoup
http://www.cnblogs.com/wupeiqi/articles/6229292.html  线程进程等，asyio,aiohttp

MTV
Model(模型)：负责业务对象与数据库的对象(ORM)   --数据及数据库对象

Template(模版)：负责如何把页面展示给用户  --  html文件

View(视图)：负责业务逻辑，并在适当的时候调用Model和Template
            --相当于mvc的controller，处理逻辑

settings下的TEMPLATES中，查看DIRS路径是否指向templates
'DIRS': [os.path.join(BASE_DIR, 'templates')],

如果使用命令行添加django项目，
需要pycharm--setting--Languages&Framework--Django中设置，之后会出现Django项目的相关提示

使用MySQL数据库
# 由于Django内部连接MySQL时使用的是MySQLdb模块，而python3中还无此模块，所以需要使用pymysql来代替
# 如下设置放置的与project同名的配置的 __init__.py文件中
import pymysql
pymysql.install_as_MySQLdb()

DATABASES = {
    'default': {
    'ENGINE': 'django.db.backends.mysql',
    'NAME':'dbname',
    'USER': 'root',
    'PASSWORD': 'xxx',
    'HOST': '',
    'PORT': '',
    }
}

# 自定义一个主键：my_id=models.AutoField(primary_key=True)
# 如果你不指定主键的话,系统会自动添加一个主键字段到你的 model.

参数：
auto_now        -->更新时自动生成更新时间，在create时不用传递此参数
    注意！！！！：
        obj = models.xxxx.objects.filter(id=1).update(aaa='aaa')    ---- 此种方式更新数据不会改变更新时间

        obj = models.xxxx.objects.filter(id=1).first()     ---------\
        obj.aaa='aaa'                                      ----------\     此种方式会改变更新时间
        obj.save()                                         ----------/
auto_now_add    -->创建时自动生成创建时间，在create时不用传递此参数


    # request.environ  封装了用户请求头和所有请求相关信息
    for k,v in request.environ.items():
        print(k,v)
    request.environ['HTTP_USER_AGENT']
    # request.COOKIES
    # request.GET
    # request.POST


Cookie是什么？
    客户端浏览器上保存的键值对
    设置：
        服务端操作的Cookie
        普通的cookie（直接可以看到敏感信息）
            obj.set_cookie('k1','v1')
            obj.set_cookie('k1','v1',max_age=10)
        签名的cookie（可能会被解密）
            obj.set_signed_cookie('k1','v1')
            request.get_signed_cookie('username')
        所以敏感信息不宜放置在cookie中，敏感信息放在数据库，频繁操作数据库
        ===========》 cookie时做认证时候，将不敏感的信息放在cookie中，频繁操作数据库 ===========

            v = datetime.datetime.utcnow() + datetime.timedelta(seconds=10)
            obj.set_cookie('k1','v1',max_age=10,expires=v)
            expires  表示固定时间戳后失效
            max_age=10  表示10秒后cookie失效
            path:
                    /       表示，全局生效
                    /xxxx/  表示，只有当前url生效

            domian:
                    obj.set_cookie('k4','v4',max_age=10,expires=v, domain='oldboy.com')


                    obj.set_cookie('k1','v1')

            httponly: 仅仅HTTP网络传输使用


浏览器客户端设置cookie，可以用原生
也可以用组装好的插件 jQuery.cookie.js
$.cookie()
一个参数：$.cookie(k)    获取值
两个参数：$.cookie(k，v)    设置值
三个参数：$.cookie(k，v， {'expires':'...','path':'...','domain':'....','secure':'....'})    设置值和参数
            expires支持     10   代表存在10s
                            d = new Date()   d.setDate(d.getDate() + 1),设置超时时间+1天

    session是服务器端的一个键值对
    session内部机制依赖于cookie

    request.session['k']
    request.session['k1'] = v
    request.session['k2'] = v

    del request.session['k1']
    request.session.clear()


    # 获取、设置、删除Session中数据
    request.session['k1']
    request.session.get('k1',None)



    request.session['k1'] = 123
    request.session.setdefault('k1',123) # 存在则不设置
    del request.session['k1']

    # 所有 键、值、键值对
    request.session.keys()
    request.session.values()
    request.session.items()
    request.session.iterkeys()
    request.session.itervalues()
    request.session.iteritems()


    # 用户session的随机字符串
    request.session.session_key

    # 将所有Session失效日期小于当前日期的数据删除
    request.session.clear_expired()

    # 检查 用户session的随机字符串 在数据库中是否
    request.session.exists("session_key")

    # 删除当前用户的所有Session数据
    request.session.delete("session_key")


XSS
    Django在数据库取出的数据有安全保护机制，无论拿到什么都会当做字符串处理
    比如一部分a标签组成的html语音也会当做字符串，而不会变成网页的部分有功能性的代码
    如果需要解除这种保护机制，有两种方法
    方法1：服务器内部
    from django.utils.safestring import mark_safe
    #  对需要返回的不需要保护的数据使用mark_safe方法
    mark_safe(result)
    方法2：前端（对数据进行安全声明）
    {{ restlt|safe }}


CSRF_TOKEN
Ajax方式通过csrf验证
cookie中提取随机字符串  csrftoken对象的值
    headers:{'X-CSRFToken':$.cookie('csrftoken')}
    from django.conf import settings
    settings.CSRF_HEADER_NAME