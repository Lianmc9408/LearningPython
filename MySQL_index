MySQL中常见索引有：
    普通索引
    唯一索引
    主键索引
    组合索引

1、普通索引仅有一个功能：加速查询
    --创建表+索引
    create table in1(
    nid int not null auto_increment primary key,
    name varchar(32) not null,
    email varchar(64) not null,
    extra text,
    index ix_name (name)
    )
    --创建索引
    create index index_name on table_name(column_name)
    --删除索引
    drop index_name on table_name;
    --查看索引
    show index from table_name;
    注意：对于创建索引时如果是BLOB 和 TEXT 类型，必须指定length。
    create index ix_extra on in1(extra(32));

2、唯一索引有两个功能：加速查询 和 唯一约束（可含null）
    --创建表+唯一索引
    create table in1(
        nid int not null auto_increment primary key,
        name varchar(32) not null,
        email varchar(64) not null,
        extra text,
        unique ix_name (name)
    )
    --创建唯一索引
    create unique index 索引名 on 表名(列名)
    --删除唯一索引
    drop unique index 索引名 on 表名

3、主键有两个功能：加速查询 和 唯一约束（不可含null）
    --创建表+主键
    create table in1(
    nid int not null auto_increment primary key,
    name varchar(32) not null,
    email varchar(64) not null,
    extra text,
    index ix_name (name)
    )

    OR

    create table in1(
        nid int not null auto_increment,
        name varchar(32) not null,
        email varchar(64) not null,
        extra text,
        primary key(ni1),
        index ix_name (name)
    )
    --创建主键
    alter table 表名 add primary key(列名);
    --删除主键
    alter table 表名 drop primary key;
    alter table 表名  modify  列名 int, drop primary key;

4、组合索引
    组合索引是将n个列组合成一个索引
    其应用场景为：频繁的同时使用n列来进行查询，如：where n1 = 'alex' and n2 = 666。
    查找：最左匹配，如name和pwd组合，条件为name和pwd时会走索引，条件单独为name(左边)时会走索引，单独为pwd是不会走索引
    --创建表
    create table in3(
    nid int not null auto_increment primary key,
    name varchar(32) not null,
    email varchar(64) not null,
    extra text
    )
    --创建组合索引
    create index ix_name_email on in3(name,email);
    如上创建组合索引之后，查询：
    name and email  -- 使用索引
    name                 -- 使用索引
    email                 -- 不使用索引
    注意：对于同时搜索n个条件时，组合索引的性能好于多个单一索引合并。


执行计划：
    explain + 查询SQL - 用于显示SQL执行信息参数，根据参考信息可以进行SQL优化
        1、type：
            all 全数据表扫描
            index   全索引表扫描
            RANGE   对索引列进行范围查找
                    select *  from tb1 where name < 'alex';
                    PS:
                        between and
                        in
                        >   >=  <   <=  操作
                        注意：!= 和 > 符号，走all查找，不是range索引查找
            INDEX_MERGE     合并索引，使用多个单列索引搜索
                            select *  from tb1 where name = 'alex' or nid in (11,22,33);
            REF             根据索引查找一个或多个值
                            select *  from tb1 where name = 'seven';
            EQ_REF          连接时使用primary key 或 unique类型
                            select tb2.nid,tb1.name from tb2 left join tb1 on tb2.nid = tb1.nid;
            CONST           常量（从索引表就有结果了，不需要去数据表）
                            表最多有一个匹配行,因为仅有一行,在这行的列值可被优化器剩余部分认为是常数,const表很快,因为它们只读取一次。
                            select nid from tb1 where nid = 2 ;
            SYSTEM          系统
                            表仅有一行(=系统表)。这是const联接类型的一个特例。
                            select * from (select nid from tb1 where nid = 1) as A;
            从上到下，性能越来越高，速度越来越快
        2、limit
            select的时候最后加上limit，找到相应条数据后就会停止扫描，不会全表扫描
            相当于碰运气，数据在前面则时间短

数据库表中添加索引后确实会让查询速度起飞，但前提必须是正确的使用索引来查询，
如果以错误的方式使用，则即使建立索引也会不奏效。
即使建立索引，索引也不会生效：
- like '%xx'
    select * from tb1 where name like '%cn';  --不生效
    select * from tb1 where name like 'cn%';  --生效，range
- 使用函数，对要查询的列进行函数计算不走索引
    select * from tb1 where reverse(name) = 'wupeiqi';
- or
    select * from tb1 where nid = 1 or email = 'seven@live.com';
    特别的：当or条件中有未建立索引的列才失效，以下会走索引
            select * from tb1 where nid = 1 or name = 'seven';
            select * from tb1 where nid = 1 or email = 'seven@live.com' and name = 'alex'
- 类型不一致
    如果列是字符串类型，传入条件是必须用引号引起来，不然...
    select * from tb1 where name = 999;
- !=
    select * from tb1 where name != 'alex'
    特别的：如果是主键，则还是会走索引
        select * from tb1 where nid != 123
- >
    select * from tb1 where name > 'alex'
    特别的：如果是主键或索引是整数类型，则还是会走索引
        select * from tb1 where nid > 123
        select * from tb1 where num > 123
- order by
    select email from tb1 order by name desc;
    当根据索引排序时候，选择的映射如果不是索引，则不走索引
    特别的：如果对主键排序，则还是走索引：
        select * from tb1 order by nid desc;

- 避免使用select *
- count(1)或count(列) 代替 count(*)
- 创建表时尽量时 char 代替 varchar
- 表的字段顺序固定长度的字段优先
- 组合索引代替多个单列索引（经常使用多个条件查询时）
- 尽量使用短索引
- 使用连接（JOIN）来代替子查询(Sub-Queries)
- 连表时注意条件类型需一致
- 索引散列值（重复少）不适合建索引，例：性别不适合